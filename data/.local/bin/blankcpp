#!/bin/zsh

RED='\033[1;31m'
BLUE='\033[1;34m'
CYAN='\033[1;36m'
NC='\033[0m'

# get project parameters
P_NAME=$1
P_MODE=$2
P_DEMONAME=$P_NAME

struct_summary()
{
    echo -e "\t${BLUE}./${P_DEMONAME}/${NC}"
    echo -e "\t├── ${BLUE}bin/${NC}"
    echo -e "\t│   └── ${BLUE}${P_DEMONAME}${NC}"
    echo -e "\t├── ${BLUE}doc/${NC}"
    echo -e "\t│   └── ${P_DEMONAME}"
    echo -e "\t├── ${BLUE}inc/${NC}"
    echo -e "\t├── ${BLUE}lib/${NC}"
    echo -e "\t├── ${BLUE}obj/${NC}"
    echo -e "\t├── ${BLUE}src/${NC}"
    echo -e "\t│   └── ${P_DEMONAME}.cc"
    echo -e "\t├── .gitignore"
    echo -e "\t├── Makefile"
    echo -e "\t└── README.md"
}

usage()
{
    echo -e "${BLUE}[${CYAN}?${BLUE}]${NC} Usage: $0 <PROJECT> [MODE]\n"
    echo -e "\tPROJECT\t- Project name"
    echo -e "\tMODE\t- Create bare minimum project code for one of the available modes:"
    echo -e "\t\t\t\tgetopt"
    echo -e "\t\t\t\tcurses"
    echo -e "\t\t\t\tbearlib"
    echo -e "\t\t\t\tsdl"
    echo -e "\t\t\t\topengl"
    echo -e "\n\tSTRUCTURE\n"
    struct_summary
    echo -e "\n"
    exit 1
}

duplicated()
{
    echo -e "${BLUE}[${RED}x${BLUE}]${NC} Directory already exists.\n"
    exit 1
}

# print header
echo $BLUE
figlet "BlankC++"
echo "Minimal C++ project scaffold generator v0.5.6"
echo $NC
[[ -z "$P_NAME" ]] && P_DEMONAME="demo" && usage

# building project mode
P_LIB=""
P_INC=""
P_IOSTREAM="true"
read -r -d '' P_CODE << EOD
int main(int argc, char **argv)
{
    std::cout << "Hello World!" << std::endl;
    return 0;
}
EOD

tabs 4

### CURSES
if [[ $P_MODE == "curses" || $P_MODE == "ncurses" ]]; then
    P_IOSTREAM="false"
    P_LIB="${P_LIB} -lncurses"
    P_INC=`echo -e "#define _XOPEN_SOURCE   600\n#define _POSIX_C_SOURCE 200112L\n\n#include <unistd.h>\n${P_INC}#include <string>\n#include <ncurses.h>\n"`
    read -r -d '' P_CODE << EOD
void wait_millis(int ms) { usleep(ms * 1000); }

int main(int argc, char **argv)
{
    int running = 1;
    char input;

    initscr();
    cbreak();
	noecho();
    curs_set(0);
    start_color();

    // id, foreground, background
    init_pair(1, COLOR_CYAN, COLOR_WHITE);
    
    int counter = 0;
    while (running) {
        clear();

        if (input) {
            attron(COLOR_PAIR(1));
            mvaddch(1, 1, input);
            attroff(COLOR_PAIR(1));
        }

        mvprintw(4, 10, "%d", counter);

        attron(A_BOLD);
        mvprintw(5, 10, "Hello World!");
        attroff(A_BOLD);
        refresh();

        timeout(0);
        input = getch();
        counter++;

        if (input == 'q') running = 0;
        wait_millis(1000 / 30);
    }
    
    endwin();
    return 0;
}
EOD

### BEARLIB
elif [[ $P_MODE == "bearlib" ]]; then
    P_IOSTREAM="false"
    P_LIB="${P_LIB} -lBearLibTerminal"
    P_INC=`echo -e "${P_INC}#include <BearLibTerminal.h>\n"`
    read -r -d '' P_CODE << EOD
const int WINDOW_W = 1280;
const int WINDOW_H = 720;
const int CELL_W = 8;
const int CELL_H = 16;

int main(int argc, char **argv)
{
    // initialize bear terminal
    terminal_open();

    // config terminal (enter fullscreen with alt + enter)
    terminal_set("input: precise-mouse=true, mouse-cursor=false");
    terminal_setf("window: title='BearLib Demo', cellsize=%dx%d, size=%dx%d, resize-mode=fit, client-size=%dx%d",
        CELL_W, CELL_H, (WINDOW_W / CELL_W), (WINDOW_H / CELL_H), WINDOW_W, WINDOW_H);

    // wait until user close the window by pressing 'q'
    int key;
    int running = 1;
    while (running) {
        terminal_clear();

        // print title text
        terminal_color(0xFF00FFFF);
        terminal_layer(2);
        terminal_bkcolor(0xFF151515);
        terminal_print(1, 1, "[color=red]Hello[/color] ${P_NAME}!");

        if (terminal_has_input()) {
            key = terminal_read();

            switch (key) {
                case TK_Q:
                    running = 0;
                    break;
                
                default:
                    break;
            }
        }

        // update terminal
        terminal_refresh();
    }

    // exit bear terminal
    terminal_close();
    return 0;
}
EOD

### BEARLIB-FULL
elif [[ $P_MODE == "bearlib-full" ]]; then
    P_IOSTREAM="false"
    P_LIB="${P_LIB} -lm -lBearLibTerminal"
    P_INC=`echo -e "${P_INC}#include <BearLibTerminal.h>\n"`
    read -r -d '' P_CODE << EOD
#include <stdlib.h>
#include <BearLibTerminal.h>
#include "config.h"
#include "screens.h"

const int WINDOW_W = 1280;
const int WINDOW_H = 720;
const int CELL_W = 8;
const int CELL_H = 16;
const int COLS_W = WINDOW_W  / CELL_W;
const int COLS_H = WINDOW_H / CELL_H;

int main(int argc, char **argv)
{
    // initialize bear terminal
    terminal_open();

    screen_state state = SCREEN_START;

    // config terminal (enter fullscreen with alt + enter)
    terminal_set("input.filter = [keyboard, mouse]");
    terminal_set("input: precise-mouse=true, mouse-cursor=false");
    terminal_setf("window: title='BearLib Demo', cellsize=%dx%d, size=%dx%d, resize-mode=fit, client-size=%dx%d",
        CELL_W, CELL_H, (WINDOW_W / CELL_W), (WINDOW_H / CELL_H), WINDOW_W, WINDOW_H);

    while (state != SCREEN_EXIT) {
        terminal_clear();

        // print title text
        switch (state) {
            case SCREEN_START:
                main_screen(&state);
                break;
            
            case SCREEN_NEW:
                new_game_screen(&state);
                break;
            
            case SCREEN_LOAD:
                load_game_screen(&state);
                break;
            
            case SCREEN_EXIT:
                // on exit
                break;
        }

        // update terminal
        terminal_refresh();
    }

    // exit bear terminal
    terminal_close();
}
EOD

### SDL
elif [[ $P_MODE == "sdl" ]]; then
    P_IOSTREAM="false"
    P_LIB="${P_LIB} -lSDL2main -lSDL2"
    P_INC=`echo -e "${P_INC}#include <SDL2/SDL.h>\n"`
    read -r -d '' P_CODE << EOD
int main(int argc, char **argv)
{
    const int SCREEN_W = 1280;
    const int SCREEN_H = 720;

    SDL_Window *window = NULL;
    SDL_Renderer *renderer = NULL;
    SDL_Event event;
    SDL_Rect rect;

    int running = 1;
    int fullscreen = 0;
    const Uint8 *keystates = SDL_GetKeyboardState(NULL);

    // initialize sdl components
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        printf("SDL could not initialize! Error: %s", SDL_GetError());
        exit(1);
    }

    // create screen and renderer
    if (SDL_CreateWindowAndRenderer(SCREEN_W, SCREEN_H, SDL_WINDOW_SHOWN, &window, &renderer) < 0) {
        printf("Renderer could not be created! Error: %s", SDL_GetError());
        exit(1);
    }

    SDL_SetWindowTitle(window, "${P_NAME}");
    SDL_SetWindowPosition(window, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED);

    // set square measurements
    rect.x = rect.y = 50;
    rect.w = rect.h = 50;

    // main loop
    unsigned int loop_start, loop_end, delta;
    while (running) {
        // keeps the screen at 60fps
        loop_start = SDL_GetTicks();
        delta      = loop_start - loop_end;
        if (delta <= 1000/60.0) continue;

        // handling events
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) running = 0;
        }

        // handling keyboard events
        if (keystates[SDL_SCANCODE_ESCAPE]) running = 0;
        if (keystates[SDL_SCANCODE_F11])    fullscreen = !fullscreen;

        if (keystates[SDL_SCANCODE_RIGHT]) rect.x += 10;
        if (keystates[SDL_SCANCODE_LEFT])  rect.x -= 10;
        if (keystates[SDL_SCANCODE_DOWN])  rect.y += 10;
        if (keystates[SDL_SCANCODE_UP])    rect.y -= 10;

        // check boundaries
        if (rect.x < 0) rect.x = 0;
        if (rect.x > (SCREEN_W - rect.w)) rect.x = (SCREEN_W - rect.w);
        if (rect.y < 0) rect.y = 0;
        if (rect.y > (SCREEN_H - rect.h)) rect.y = (SCREEN_H - rect.h);

        // clear renderer with background color
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        // update window state if needed
        if (fullscreen) SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN);
        else SDL_SetWindowFullscreen(window, 0);

        // draws the blue square
        SDL_SetRenderDrawColor(renderer, 40, 43, 200, 255);
        SDL_RenderFillRect(renderer, &rect);

        // draws a single pink pixel on the center of the screen
        SDL_SetRenderDrawColor(renderer, 156, 0, 156, 255);
        SDL_RenderDrawPoint(renderer, (SCREEN_W / 2), (SCREEN_H / 2));
        
        // update window with content
        SDL_RenderPresent(renderer);

        // keeping track of elapsed time
        loop_end = SDL_GetTicks();
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
    return 0;
}
EOD

### OPENGL
elif [[ $P_MODE == "opengl" ]]; then
    P_IOSTREAM="false"
    P_LIB="${P_LIB} -lGL -lGLEW -lglfw"
    P_INC=`echo -e "${P_INC}#include <GL/glew.h>\n#include <GL/gl.h>\n#include <GLFW/glfw3.h>\n#include <cstring>\n#include <cmath>\n"`
    read -r -d '' P_CODE << EOD
// callback for window resizing
void framebuffer_size_callback(GLFWwindow *window, int width, int height)
{
    glViewport(0, 0, width, height);
}


// handle user input
void processInput(GLFWwindow *window)
{
    if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS) {
        glfwSetWindowShouldClose(window, true);
    }
}


int main(int argc, char **argv)
{
    const int WINDOW_W = 1280, WINDOW_H = 720;
    GLFWwindow* window;

    // Initialize the library
    if (! glfwInit())
        return -1;
    
    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
    glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

    // Create a windowed mode window and its OpenGL context
    window = glfwCreateWindow(WINDOW_W, WINDOW_H, "HelloGL", NULL, NULL);
    if (! window) {
        glfwTerminate();
        return -1;
    }

    // Make the window's context current
    glfwMakeContextCurrent(window);

    // Initialize GLEW
    GLenum glew_err = glewInit();
    if (glew_err != GLEW_OK) {
        glfwTerminate();
        return -1;
    }

    // Defining viewport for opengl rendering
    glViewport(0, 0, WINDOW_W, WINDOW_H);
    glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);

    //
    // SHADERS
    //

    // Vertex Shader
    const char *vertexShaderSource = R"VTX(
        #version 330 core
        layout (location = 0) in vec3 pos;
        layout (location = 1) in vec3 defaultColor;
        out vec3 v_color;

        uniform vec3 customColor;

        void main() {
            gl_Position = vec4(pos.xyz, 1.0f);
            v_color = defaultColor;
        }
    )VTX";

    unsigned int vertexShader;
    GLint vertexShaderSourceSize = strlen(vertexShaderSource);
    vertexShader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertexShader, 1, &vertexShaderSource, &vertexShaderSourceSize);
    glCompileShader(vertexShader);

    // Fragment Shader
    const char *fragmentShaderSource = R"FRAG(
        #version 330 core
        in vec3 v_color;
        out vec4 color;

        void main() {
            color = vec4(v_color, 1.0f);
        }
    )FRAG";

    unsigned int fragmentShader;
    GLint fragmentShaderSourceSize = strlen(fragmentShaderSource);
    fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragmentShader, 1, &fragmentShaderSource, &fragmentShaderSourceSize);
    glCompileShader(fragmentShader);

    // Shader Program
    unsigned int shaderProgram;
    shaderProgram = glCreateProgram();
    glAttachShader(shaderProgram, vertexShader);
    glAttachShader(shaderProgram, fragmentShader);
    glLinkProgram(shaderProgram);

    // Delete shader objects once linked
    glDeleteShader(vertexShader);
    glDeleteShader(fragmentShader);

    //
    // VERTEX DATA
    //
    
    // Creating triangle vertices
    float vertices[] = {
        // positions          // colors
         0.5f,  0.5f, 0.0f,   1.0f, 0.0f, 0.0f, // top right
         0.5f, -0.5f, 0.0f,   0.0f, 1.0f, 0.0f, // bottom right
        -0.5f, -0.5f, 0.0f,   0.0f, 0.0f, 1.0f, // bottom left
        -0.5f,  0.5f, 0.0f,   1.0f, 1.0f, 1.0f  // top left
    };

    unsigned int indices[] = {
        0, 1, 3, // first triangle
        1, 2, 3  // second triangle
    };

    // Vertex Array Object
    unsigned int VAO;
    glGenVertexArrays(1, &VAO);
    glBindVertexArray(VAO);

    // Element/Index Buffer Object
    unsigned int EBO;
    glGenBuffers(1, &EBO);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);
    glBufferData(GL_ELEMENT_ARRAY_BUFFER, sizeof(indices), indices, GL_STATIC_DRAW);

    // Vertex Buffer Object
    unsigned int VBO; // store the object id
    glGenBuffers(1, &VBO);
    glBindBuffer(GL_ARRAY_BUFFER, VBO);
    glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

    // Tells OpenGL how to interpret vertex data
    int attr_position = 0, attr_color = 1; // data starts at index 0, as stated in the shader (location = 0)
    int size_position = 3, size_color = 3;  // size of the vertex attribute, in this case 3 for a vec3 (x, y, z)
    int stride = 6 * sizeof(float); // space between consecutive attributes, we advance in steps of 3 as it is tightly packed
    glVertexAttribPointer(attr_position, size_position, GL_FLOAT, GL_FALSE, stride, (void *) 0);
    glEnableVertexAttribArray(attr_position);

    glVertexAttribPointer(attr_color, size_color, GL_FLOAT, GL_FALSE, stride, (void *) (3 * sizeof(float)));
    glEnableVertexAttribArray(attr_color);

    // unbind buffers
    glBindBuffer(GL_ARRAY_BUFFER, 0);
    glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
    glBindVertexArray(0);

    //
    // MAIN LOOP
    //

    // Loop until the user closes the window
    while (! glfwWindowShouldClose(window)) {
        // Process user input
        processInput(window);

        // Render here
        glClearColor(0.2f, 0.2f, 0.2f, 1.0f);
        glClear(GL_COLOR_BUFFER_BIT);

        // Prepare buffers and shaders
        glUseProgram(shaderProgram);
        glBindVertexArray(VAO);
        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, EBO);

        // passing custom color to the shaders
        float timeValue = glfwGetTime();
        float greenValue = (sin(timeValue) / 2.0f) + 0.5f;
        int uniformCustomColor = glGetUniformLocation(shaderProgram, "customColor");
        glUniform4f(uniformCustomColor, 1.0f, greenValue, 0.2f, 1.0f);

        // Draw elements to the screen
        glPolygonMode(GL_FRONT_AND_BACK, GL_FILL); // GL_LINE for wireframe mode
        glDrawElements(GL_TRIANGLES, sizeof(indices) / sizeof(unsigned int), GL_UNSIGNED_INT, 0);

        glBindBuffer(GL_ELEMENT_ARRAY_BUFFER, 0);
        glBindVertexArray(0);

        // Swap front and back buffers
        glfwSwapBuffers(window);

        // Poll for and process events
        glfwPollEvents();
    }

    glfwTerminate();
    return 0;
}
EOD

### GETOPT
elif [[ $P_MODE == "getopt" ]]; then
    P_IOSTREAM="true"
    P_LIB="${P_LIB}"
    P_INC=`echo -e "${P_INC}#include <getopt.h>\n#include <string>\n"`
    read -r -d '' P_CODE << EOD
void show_usage(char *bin)
{
    std::cout << "$ " << bin << " <-m|-f> [-a AGE] [-n NAME] [-h HEIGHT]" << std::endl;
    exit(1);
}

int main(int argc, char** argv)
{
    int option;
    int mflag = 0;
    int fflag = 0;
    int aflag = 0;
    int hflag = 0;
    char available_options[] = "mfn:a:h:";
    std::string charname = "Guest";
    int age;
    double height;

    if (argc < 2) show_usage(argv[0]);

    opterr = 0; // suppress default 'invalid option' message
    while ((option = getopt(argc, argv, available_options)) != -1) {
        switch (option)
        {
            case 'm':
                if (fflag) show_usage(argv[0]);
                mflag = 1;
                break;
            
            case 'f':
                if (mflag) show_usage(argv[0]);
                fflag = 1;
                break;
            
            case 'n':
                if (optarg == NULL) show_usage(argv[0]);
                charname = std::string(optarg);
                break;
            
            case 'a':
                if (optarg == NULL) show_usage(argv[0]);
                aflag = 1;
                age = atoi(optarg);
                break;
            
            case 'h':
                if (optarg == NULL) show_usage(argv[0]);
                hflag = 1;
                height = atof(optarg);
                break;
            
            case '?':
            default:
                std::cout << "Invalid option '-" << optopt << "' was found!" << std::endl;
                break;
        }
    }

    if (!mflag && !fflag) show_usage(argv[0]);
    if (mflag) std::cout << "Male character called " << charname << "!" << std::endl;
    if (fflag) std::cout << "Female character called " << charname << "!" << std::endl;
    if (aflag) {
        if (age < 18) {
            std::cout << "You should not be playing with this!" << std::endl;
            exit(1);
        }

        std::cout << "You are " << age << " years old... nice!" << std::endl;
    }

    if (hflag) {
        if (height < 1.0) {
            std::cout << "Aren't you too small to be here?" << std::endl;
            exit(1);
        }

        std::cout << "You are " << height << " tall!" << std::endl;
    }

    return 0;
}
EOD
fi

[[ "$P_IOSTREAM" == "true" ]] && P_INC=`echo -e "${P_INC}#include <iostream>\n"`

# header
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Project: $P_NAME"

# creating project directory structure
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating directory structure..."
[ -d "$P_NAME" ] && duplicated
mkdir -p $P_NAME/src $P_NAME/lib $P_NAME/inc $P_NAME/obj $P_NAME/bin $P_NAME/doc


# ClangD compile flags
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating compile_flags.txt"
cat >> $P_NAME/compile_flags.txt <<EOT
-Isrc
-Iinclude
-fPIC
-g
-Wall
-Wextra
-Wpedantic
-std=c++17
EOT



# Makefile
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating makefile"
cat >> $P_NAME/Makefile <<EOT
SDIR = ./src
ODIR = ./obj
LDIR = ./lib
IDIR = ./inc
BDIR = ./bin
DDIR = ./doc
FDIR = ./build
MDIR = /usr/share/man/man3

BNAME = ${P_NAME}
LIBDIR = ${P_NAME}
LIBNAME = lib${P_NAME}

MK = mkdir -p
CC = g++
CEXT = cc
HEXT = h
CFLAGS = -I\$(IDIR)${P_LIB} -L\$(LDIR) -std=c++17
CFLAGS += -fPIC -Wall -Wextra -Wpedantic \\
          -Wformat=2 -Wno-unused-parameter -Wshadow \\
          -Wwrite-strings -Wredundant-decls -Wmissing-include-dirs

HEADERS = \$(shell find \$(IDIR) -name '*.\$(HEXT)')
SOURCES = \$(shell find \$(SDIR) -name '*.\$(CEXT)')

OBJECTS = \$(patsubst \$(SDIR)/%.\$(CEXT), \$(ODIR)/%.o, \$(SOURCES))

\$(BDIR)/\$(BNAME): \$(OBJECTS)
	\$(CC) -g -o \$@ \$^ \$(CFLAGS)

\$(ODIR)/%.o: \$(SDIR)/%.\$(CEXT) \$(HEADERS)
	\$(MK) \$(shell sh -c "find src -type d | sed -e s/src/obj/g")
	\$(CC) -g -c -o \$@ \$< \$(CFLAGS)

-include Makefile.deps

Makefile.deps:
	\$(CC) \$(CFLAGS) -MM \$(SOURCES) > Makefile.deps

.PHONY: clear doc
.SILENT: run clear

LIBFILES := \$(filter-out main.o,\$(wildcard \$(ODIR)/*.o))

clear:
	rm Makefile.deps
	rm -Rf dist
	rm -f \$(ODIR)/*.o *~ core \$(INCDIR)/*~ \$(BDIR)/* \$(DDIR)/*.gz

statlib:
	mkdir -p dist/static/headers
	ar rcs dist/static/\$(LIBNAME).a \$(LIBFILES)
	ranlib dist/static/\$(LIBNAME).a
	cp \$(IDIR)/*.\$(HEXT) dist/static/headers

run:
	chmod +x \$(BDIR)/\$(BNAME) && \$(BDIR)/\$(BNAME)

shared:
	mkdir -p dist/shared/headers
	\$(CC) -shared -o dist/shared/\$(LIBNAME).so \$(LIBFILES)
	cp \$(IDIR)/*.\$(HEXT) dist/shared/headers

install:
	for H in \$(shell ls \$(DDIR)); do gzip -c \$(DDIR)/\$\${H} > \$(DDIR)/\$\${H}.gz; done
	mv \$(DDIR)/*.gz \$(MDIR)
	cp \$(BDIR)/\$(BNAME) /usr/bin

remove:
	rm /usr/bin/\$(BNAME)

libinstall:
	for H in \$(shell ls \$(DDIR)); do gzip -c \$(DDIR)/\$\${H} > \$(DDIR)/\$\${H}.gz; done
	mv \$(DDIR)/*.gz \$(MDIR)
	mkdir -p /usr/include/\$(LIBDIR)
	cp -Rf dist/shared/headers/* /usr/include/\$(LIBDIR)
	cp dist/shared/\$(LIBNAME).so /usr/lib

libremove:
	rm -Rf /usr/include/\$(LIBDIR)
	rm -f /usr/lib/\$(LIBNAME).so

doc:
	@man \$(DDIR)/\$(BNAME)
EOT


# man page
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating man page"
FDATE=`date +"%d %B %Y"`
cat >> $P_NAME/doc/$P_NAME <<EOT
.\" Manpage for ${P_NAME}.
.\" Contact ${USER}@${HOST} to correct errors or typos.
.TH man 1 "${FDATE}" "1.0" "${P_NAME} man page"
.SH NAME
${P_NAME} \- lorem ipsum dolor sit amet
.SH SYNOPSIS
${P_NAME} [OPTIONS...]
.SH DESCRIPTION
${P_NAME} is a template C software generated by the FactorC scaffolding script.
.SH OPTIONS
Description of all options that can change ${P_NAME} behavior.
.SH SEE ALSO
Any references you may want to include.
.SH BUGS
No known bugs.
.SH AUTHOR
Software written by ${USER} <${USER}@${HOST}>
EOT

# README file
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating README file"
cat >> $P_NAME/README.md <<EOT
# README

Demo readme file for project documentation.
EOT


# gitignore file
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating .gitignore"
cat >> $P_NAME/.gitignore <<EOT
build/
bin/
obj/
EOT


# main source file
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating placeholder code"
cat >> $P_NAME/src/main.cc <<EOT
${P_INC}

${P_CODE}
EOT

################## BEGIN ADITIONALS ###################

if [[ $P_MODE == "bearlib-full" ]]; then
    ##
    ##
    cat >> $P_NAME/src/config.h <<EOT
${P_INC}
#pragma once

extern const int WINDOW_W;
extern const int WINDOW_H;
extern const int CELL_W;
extern const int CELL_H;
extern const int COLS_W;
extern const int COLS_H;

#define DEG2RAD 3.14159/180;
#define MIN(x, y) ((x) > (y)) ? (y) : (x)
#define MAX(x, y) ((x) > (y)) ? (x) : (y)
EOT

    ##
    ##
    cat >> $P_NAME/src/screens.h <<EOT
#pragma once

enum screen_state {
    SCREEN_START,
    SCREEN_NEW,
    SCREEN_LOAD,
    SCREEN_EXIT
};

enum menu_state {
    MENU_NONE,
    MENU_INVENTORY,
    MENU_SKILLS
};

void _window_full_frame_border_simple(const char *);
void _window_full_frame_border_fancy(void);

void main_screen(screen_state*);
void main_screen_state(screen_state*);

void new_game_screen(screen_state*);
void new_game_screen_state(int, screen_state*, menu_state*, int*, int*, const int, const int);

void load_game_screen(screen_state*);
void load_game_screen_state(screen_state*);

void menu_inventory(int, screen_state*, menu_state*);
void menu_inventory_state(int, screen_state*, menu_state*);

void menu_skills(int, screen_state*, menu_state*);
void menu_skills_state(int, screen_state*, menu_state*);

EOT

    ##
    ##
    cat >> $P_NAME/src/screens.cc <<EOT
#include <BearLibTerminal.h>
#include "config.h"
#include "screens.h"
#include "map.h"

const int LAYER_MAP = 0;
const int LAYER_PLAYER = 1;
const int LAYER_GUI = 2;

// -------------------------
// Window Utilities
// -------------------------
void _window_full_frame_border_simple(const char *texture)
{
    terminal_clear();

    for (int x=1; x < COLS_W-1; x++) {
        terminal_print(x, 1, texture);
        terminal_print(x, COLS_H-2, texture);
    }

    for (int y=1; y < COLS_H-1; y++) {
        terminal_print(1, y, texture);
        terminal_print(COLS_W-2, y, texture);
    }
}

void _window_full_frame_border_fancy(void)
{
    terminal_clear();

    for (int x=1; x < COLS_W-1; x++) {
        terminal_print(x, 1, "═");
        terminal_print(x, COLS_H-2, "═");
    }

    for (int y=1; y < COLS_H-1; y++) {
        terminal_print(1, y, "║");
        terminal_print(COLS_W-2, y, "║");
    }

    terminal_print(1, 1, "╔");
    terminal_print(COLS_W-2, 1, "╗");
    terminal_print(COLS_W-2, COLS_H-2, "╝");
    terminal_print(1, COLS_H-2, "╚");
}

// -------------------------
// Main Menu
// -------------------------
void main_screen(screen_state *state)
{
    terminal_layer(LAYER_GUI);
    terminal_color(0xFF00FFFF);
    terminal_bkcolor(0xFF151515);
    terminal_print(1, 1, "[color=red]Hello[/color] c-bear-screens!");
    terminal_print(1, 3, "[[N]]         New game");
    terminal_print(1, 4, "[[L]]         Load game");
    terminal_print(1, 5, "[[Alt+Enter]] Toggle fullscreen");
    terminal_print(1, 7, "[[Ctrl+Q]]    Exit");

    main_screen_state(state);
}

void main_screen_state(screen_state *state)
{
    static int mmoved=0, mx=0, my=0;
    static int lclick=0, lx=0, ly=0;
    static int rclick=0, rx=0, ry=0;

    if (terminal_has_input()) {
        switch (terminal_read()) {
            case TK_Q:
                if (terminal_state(TK_CONTROL)) {
                    *state = SCREEN_EXIT;
                }
                break;
            
            case TK_N:
                *state = SCREEN_NEW;
                break;
            
            case TK_L:
                *state = SCREEN_LOAD;
                break;
            
            case TK_MOUSE_MOVE: {
                mmoved = 1;
                mx = terminal_state(TK_MOUSE_X);
                my = terminal_state(TK_MOUSE_Y);
                break;
            }

            case TK_MOUSE_LEFT: {
                rclick = 0;
                lclick = 1;

                lx = terminal_state(TK_MOUSE_X);
                ly = terminal_state(TK_MOUSE_Y);
                break;
            }

            case TK_MOUSE_RIGHT: {
                lclick = 0;
                rclick = 1;

                rx = terminal_state(TK_MOUSE_X);
                ry = terminal_state(TK_MOUSE_Y);
                break;
            }

            default:
                break;
        }
    }

    if (lclick) {
        terminal_layer(LAYER_GUI);
        terminal_printf(1, 11, "[color=cyan]Left click at:[/color] [color=pink]%d, %d[/color]", lx, ly);
    } else if (rclick) {
        terminal_layer(LAYER_GUI);
        terminal_printf(1, 11, "[color=cyan]Right click at:[/color] [color=pink]%d, %d[/color]", rx, ry);
    }

    if (mmoved) {
        terminal_layer(LAYER_GUI);
        terminal_printf(1, 10, "[color=cyan]Mouse coordinates:[/color] [color=green]%d, %d[/color]", mx, my);
        
        terminal_layer(LAYER_MAP);
        terminal_print(mx, my, "[color=red]█[/color]");
    }
}


// -------------------------
// Load Menu
// -------------------------
void load_game_screen(screen_state *state)
{
    terminal_color(0xFF00FFFF);
    terminal_layer(0);
    terminal_bkcolor(0xFF151515);
    terminal_print(1, 1, "[color=red]Load[/color] new game!");
    terminal_print(1, 3, "[[B]] Back to main screen");

    load_game_screen_state(state);
}

void load_game_screen_state(screen_state *state)
{
    if (terminal_has_input()) {
        switch (terminal_read()) {
            case TK_B:
                *state = SCREEN_START;
                break;
            
            default:
                break;
        }
    }
}


// -------------------------
// Game Level
// -------------------------
void new_game_screen(screen_state *state)
{
    static int x=10, y=10;
    static menu_state mstate = MENU_NONE;
    static Tile **map;

    // create the map with the double the size of the screen
    int map_w = COLS_W * 2;
    int map_h = COLS_H * 2; 

    if (map == NULL) {
        map = map_make(map_w, map_h);
        map_fill_basic_dungeon(map);
    }

    // creating player tile
    static Tile player_tile = { '@', "purple", "purple", true, false };

    // camera calculations
    bool restrictCameraToMap = false;
    int offset_x = x - (COLS_W / 2);
    int offset_y = y - (COLS_H / 2);

    if (restrictCameraToMap) {
        // only works if maps is at least the size of the screen
        if (map_w >= COLS_W && map_h >= COLS_H) {
            if (offset_x < 0) offset_x = 0;
            if (offset_x > (map_w - COLS_W)) offset_x = map_w - COLS_W;

            if (offset_y < 0) offset_y = 0;
            if (offset_y > (map_h - COLS_H)) offset_y = map_h - COLS_H;
        }
    }

    // fov calculation
    map_fov(map, map_w, map_h, (x - offset_x), (y - offset_y), 10);

    // render map
    terminal_layer(LAYER_MAP);
    for (int col=0; col < map_w; ++col) {
        for (int row=0; row < map_h; ++row) {

            if (row+offset_y >= 0
                && col+offset_x >= 0
                && row+offset_y < map_h
                && col+offset_x < map_w) {

                if (map[col][row].in_fov) {
                    terminal_printf(col, row, "[color=#%s]%c[/color]", map[col][row].color_on, map[col][row].sprite);
                } else {
                    (! map[col][row].hide_outside_fov)
                        ? terminal_printf(col, row, "[color=#%s]%c[/color]", map[col][row].color_off, map[col][row].sprite)
                        : terminal_print(col, row, " ");
                }
            }
            else {
                terminal_printf(col, row, " ");
            }

        }
    }

    // render player
    terminal_layer(LAYER_MAP);
    terminal_printf((x - offset_x), (y - offset_y), "[color=%s]%c[/color]", player_tile.color_on, player_tile.sprite);

    // render gui
    terminal_layer(LAYER_GUI);
    terminal_print(1, 2, "[[B]] Back to menu");
    terminal_print(1, 3, "[[I]] Inventory");
    terminal_print(1, 4, "[[K]] Skills");

    // debug info
    terminal_printf(1, 6, "Map Size [[W: %3d, W: %3d]]", map_w, map_h);
    terminal_printf(1, 7, "Player   [[X: %3d, Y: %3d]]", x, y);
    
    int input = 0;
    if (terminal_has_input()) {
        input = terminal_read();
    }

    switch (mstate) {
        case MENU_INVENTORY:
            menu_inventory(input, state, &mstate);
            break;
        
        case MENU_SKILLS:
            menu_skills(input, state, &mstate);
            break;
        
        default:
            new_game_screen_state(input, state, &mstate, &x, &y, map_w, map_h);
            break;
    }
}

void new_game_screen_state(int input, screen_state *state, menu_state *mstate, int *x, int *y, const int map_w, const int map_h)
{
    switch (input) {
        case TK_B:
            *x = 10;
            *y = 10;
            *state = SCREEN_START;
            break;
        
        case TK_I:
            *mstate = MENU_INVENTORY;
            break;
        
        case TK_K:
            *mstate = MENU_SKILLS;
            break;
        
        case TK_A:
        case TK_LEFT:
            if (*mstate == MENU_NONE) *x -= 1;
            break;
        
        case TK_D:
        case TK_RIGHT:
            if (*mstate == MENU_NONE) *x += 1;
            break;
        
        case TK_W:
        case TK_UP:
            if (*mstate == MENU_NONE) *y -= 1;
            break;
        
        case TK_S:
        case TK_DOWN:
            if (*mstate == MENU_NONE) *y += 1;
            break;
        
        default:
            break;
    }

    // check player boundaries
    if (*x < 0) *x = 0;
    if (*x >= map_w) *x = map_w - 1;
    if (*y < 0) *y = 0;
    if (*y >= map_h) *y = map_h - 1;
}


// -------------------------
// In-Game Menus
// -------------------------
void menu_inventory(int input, screen_state *state, menu_state *mstate)
{
    terminal_layer(LAYER_MAP);

    terminal_print(20,  9, "+-------------------+");
    terminal_print(20, 10, "| INVENTORY MENU    |");
    terminal_print(20, 11, "| ================= |");
    terminal_print(20, 12, "| [[1]] First item    |");
    terminal_print(20, 13, "| [[2]] Second item   |");
    terminal_print(20, 14, "|                   |");
    terminal_print(20, 15, "| [[B]] Close         |");
    terminal_print(20, 16, "+-------------------+");


    menu_inventory_state(input, state, mstate);
}

void menu_inventory_state(int input, screen_state *state, menu_state *mstate)
{
    static int last_input = 0;

    if (input == TK_1 || input == TK_2 || input == TK_B) last_input = input;

    switch (last_input) {
        case TK_1:
            terminal_print(1, 1, "[color=green]Player used First Item [/color]");
            break;
        
        case TK_2:
            terminal_print(1, 1, "[color=red]Player used Second Item[/color]");
            break;
        
        case TK_B:
            last_input = 0;
            *mstate = MENU_NONE;
            break;

        default:
            break;
    }
}

// -----

void menu_skills(int input, screen_state *state, menu_state *mstate)
{
    terminal_layer(LAYER_MAP);

    _window_full_frame_border_fancy();

    int scol = 20;
    int srow = 10;
    int cstep = 27;
    terminal_print(4, 4, "[[B]] Return to game");

    terminal_print(scol, srow,   "Strength       [[11]]");
    terminal_print(scol, srow+1, "Dexterity      [[11]]");
    terminal_print(scol, srow+2, "Endurance      [[11]]");
    terminal_print(scol, srow+3, "Charisma       [[11]]");
    terminal_print(scol, srow+4, "Intelligence   [[11]]");

    scol += cstep;

    terminal_print(scol, srow,   "Survival       [[11]]");
    terminal_print(scol, srow+1, "Investigation  [[11]]");
    terminal_print(scol, srow+2, "Intimidation   [[11]]");
    terminal_print(scol, srow+3, "Melee Combat   [[11]]");
    terminal_print(scol, srow+4, "Subterfuge     [[11]]");

    terminal_print((COLS_W-1)/2, (COLS_H-1)/2, "+");

    menu_skills_state(input, state, mstate);
}

void menu_skills_state(int input, screen_state *state, menu_state *mstate)
{
    static int last_input = 0;

    if (input == TK_1 || input == TK_2 || input == TK_B) last_input = input;

    switch (last_input) {
        case TK_B:
            last_input = 0;
            *mstate = MENU_NONE;
            break;

        default:
            break;
    }
}
EOT

    ##
    ##
    cat >> $P_NAME/src/map.h <<EOT
#pragma once

struct Tile {
    char sprite;
    const char *color_on;
    const char *color_off;
    bool in_fov;
    bool hide_outside_fov;
};

Tile tile_create(char sprite, const char *color_on, const char *color_off, bool fov_exclusive);
Tile** map_make(int size_w, int size_h);

void map_fill_basic_dungeon(Tile **map);
void map_fov(Tile **map, int map_w, int map_h, int x, int y, int distance);

void _map_fill_single_char(Tile **map, char filler);
int _diagonal_distance(int x0, int y0, int x1, int y1);
int _linear_interpolation(float start, float end, float ratio);
EOT

    ##
    ##
    cat >> $P_NAME/src/map.cc <<EOT
#include <memory>
#include <cmath>
#include "config.h"
#include "map.h"

Tile tile_create(char sprite, const char *color_on, const char *color_off, bool fov_exclusive)
{
    Tile t = { sprite, color_on, color_off, false, fov_exclusive };
    return t;
}

Tile** map_make(int size_w, int size_h)
{
    Tile *rows  = (Tile*) calloc(size_w * size_h, sizeof(Tile));
    Tile **cols = (Tile**) malloc(size_w * sizeof(Tile*));

    for (int i=0; i < size_w; ++i)
    {
        cols[i] = rows + i * size_h;

        for (int j = 0; j < size_h; j++) {
            cols[i][j] = tile_create(' ', "008800", "333333", false);
        }
    }

    return cols;
}

void map_fill_basic_dungeon(Tile **map)
{
    _map_fill_single_char(map, '.');
}

void map_fov(Tile **map, int map_w, int map_h, int x, int y, int distance)
{
    // reset fov to all false
    for (int i = 0; i < map_w; i++) {
        for (int j = 0; j < map_h; j++) {
            map[i][j].in_fov = false;
        }
    }

    // loop 360 degrees arround target
    for (int i = 0; i < 360; ++i) {
        // create a line between target and current degree limits
        float deg = i * DEG2RAD;
        int tx = round(cos(deg) * distance) + x;
        int ty = round(sin(deg) * distance) + y;

        // line size
        int ds = _diagonal_distance(x, y, tx, ty);

        // trace the line with linear interpolation
        for (int j = 0; j < ds; j++) {
            int lx = _linear_interpolation(x, tx, j / (float)ds);
            int ly = _linear_interpolation(y, ty, j / (float)ds);

            // check if tile is in bounds
            if (lx < 0 || lx > map_w) continue;
            if (ly < 0 || ly > map_h) continue;

            // flag the cell as in-bounds
            map[lx][ly].in_fov = true;
        }
    }
}

// -- ---------------------------------------------

void _map_fill_single_char(Tile **map, char filler)
{
    for (int col=0; col < COLS_W; ++col) {
        for (int row=0; row < COLS_H; ++row) {
            map[col][row].sprite = filler;
        }
    }
}

int _diagonal_distance(int x0, int y0, int x1, int y1)
{
    int dx = abs(x1 - x0);
    int dy = abs(y1 - y0);
    return MAX(dx, dy);
}

int _linear_interpolation(float start, float end, float ratio)
{
    return start + ratio * (end - start);
}
EOT
fi

################## END ADITIONALS #####################

echo -e "${BLUE}[${CYAN}!${BLUE}]${NC} All done :)\n"
struct_summary
echo -e "\n"
