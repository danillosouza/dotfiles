#!/bin/zsh

RED='\033[1;31m'
BLUE='\033[1;34m'
CYAN='\033[1;36m'
NC='\033[0m'

# get project parameters
P_NAME=$1
P_MODE=$2
P_DEMONAME=$P_NAME

struct_summary()
{
    echo -e "\t${BLUE}./${P_DEMONAME}/${NC}"
    echo -e "\t├── ${BLUE}bin/${NC}"
    echo -e "\t│   └── ${BLUE}${P_DEMONAME}${NC}"
    echo -e "\t├── ${BLUE}doc/${NC}"
    echo -e "\t│   └── ${P_DEMONAME}"
    echo -e "\t├── ${BLUE}inc/${NC}"
    echo -e "\t├── ${BLUE}lib/${NC}"
    echo -e "\t├── ${BLUE}obj/${NC}"
    echo -e "\t├── ${BLUE}src/${NC}"
    echo -e "\t│   └── ${P_DEMONAME}.c"
    echo -e "\t├── .gitignore"
    echo -e "\t├── Makefile"
    echo -e "\t└── README.md"
}

usage()
{
    echo -e "${BLUE}[${CYAN}?${BLUE}]${NC} Usage: $0 <PROJECT> [MODE]\n"
    echo -e "\tPROJECT\t- Project name"
    echo -e "\tMODE\t- Create the project with the flags for one of the available modes:"
    echo -e "\t\t\t\tcurses"
    echo -e "\t\t\t\tsdl"
    echo -e "\n\tSTRUCTURE\n"
    struct_summary "demo"
    echo -e "\n"
    exit 1
}

duplicated()
{
    echo -e "${BLUE}[${RED}x${BLUE}]${NC} Directory already exists.\n"
    exit 1
}

# print header
echo $BLUE
figlet "FactorC"
echo "C project scaffold generator v0.4.2"
echo $NC
[[ -z "$P_NAME" ]] && P_DEMONAME="demo" && usage

# building project mode
P_LIB=""
P_INC="#include <stdlib.h>"
P_CODE="puts(\"Hello World!\");"
P_STDIO="true"

tabs 4

### CURSES
if [[ $P_MODE == "curses" ]]; then
    P_STDIO="false"
    P_LIB="${P_LIB} -lncurses"
    P_INC=`echo -e "${P_INC}\n#include <ncurses.h>"`
    read -r -d '' P_CODE << EOD
    initscr();
    
    printw("Hello World!");
    refresh();
    
    getch();
    endwin();
EOD

### SDL
elif [[ $P_MODE == "sdl" ]]; then
    P_STDIO="false"
    P_LIB="${P_LIB} -lSDL2"
    P_INC=`echo -e "${P_INC}\n#include <SDL2/SDL.h>"`
    read -r -d '' P_CODE << EOD
    const int SCREEN_W = 1280;
    const int SCREEN_H = 720;

    SDL_Window *window = NULL;
    SDL_Renderer *renderer = NULL;
    SDL_Event event;
    SDL_Rect rect;

    int running = 1;
    int fullscreen = 0;
    const Uint8 *keystates = SDL_GetKeyboardState(NULL);

    // initialize sdl components
    if (SDL_Init(SDL_INIT_VIDEO) < 0) {
        printf("SDL could not initialize! Error: %s", SDL_GetError());
        exit(1);
    }

    // create screen and renderer
    if (SDL_CreateWindowAndRenderer(SCREEN_W, SCREEN_H, SDL_WINDOW_SHOWN, &window, &renderer) < 0) {
        printf("Renderer could not be created! Error: %s", SDL_GetError());
        exit(1);
    }

    SDL_SetWindowTitle(window, "${P_NAME}");
    SDL_SetWindowPosition(window, SDL_WINDOWPOS_CENTERED, SDL_WINDOWPOS_CENTERED);

    // set square measurements
    rect.x = rect.y = 50;
    rect.w = rect.h = 50;

    // main loop
    unsigned int loop_start, loop_end, delta;
    while (running) {
        // keeps the screen at 60fps
        loop_start = SDL_GetTicks();
        delta      = loop_start - loop_end;
        if (delta <= 1000/60.0) continue;

        // handling events
        while (SDL_PollEvent(&event)) {
            if (event.type == SDL_QUIT) running = 0;
        }

        // handling keyboard events
        if (keystates[SDL_SCANCODE_ESCAPE]) running = 0;
        if (keystates[SDL_SCANCODE_F11])    fullscreen = !fullscreen;

        if (keystates[SDL_SCANCODE_RIGHT]) rect.x += 10;
        if (keystates[SDL_SCANCODE_LEFT])  rect.x -= 10;
        if (keystates[SDL_SCANCODE_DOWN])  rect.y += 10;
        if (keystates[SDL_SCANCODE_UP])    rect.y -= 10;

        // check boundaries
        if (rect.x < 0) rect.x = 0;
        if (rect.x > (SCREEN_W - rect.w)) rect.x = (SCREEN_W - rect.w);
        if (rect.y < 0) rect.y = 0;
        if (rect.y > (SCREEN_H - rect.h)) rect.y = (SCREEN_H - rect.h);

        // clear renderer with background color
        SDL_SetRenderDrawColor(renderer, 0, 0, 0, 255);
        SDL_RenderClear(renderer);

        // update window state if needed
        if (fullscreen) SDL_SetWindowFullscreen(window, SDL_WINDOW_FULLSCREEN);
        else SDL_SetWindowFullscreen(window, 0);

        // draws the blue square
        SDL_SetRenderDrawColor(renderer, 40, 43, 200, 255);
        SDL_RenderFillRect(renderer, &rect);

        // draws a single pink pixel on the center of the screen
        SDL_SetRenderDrawColor(renderer, 156, 0, 156, 255);
        SDL_RenderDrawPoint(renderer, (SCREEN_W / 2), (SCREEN_H / 2));
        
        // update window with content
        SDL_RenderPresent(renderer);

        // keeping track of elapsed time
        loop_end = SDL_GetTicks();
    }

    SDL_DestroyRenderer(renderer);
    SDL_DestroyWindow(window);
    SDL_Quit();
EOD
fi

[[ "$P_STDIO" == "true" ]] && P_INC=`echo -e "${P_INC}\n#include <stdio.h>"`

# header
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Project: $P_NAME"

# creating project directory structure
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating directory structure..."
[ -d "$P_NAME" ] && duplicated
mkdir -p $P_NAME/src $P_NAME/lib $P_NAME/inc $P_NAME/obj $P_NAME/bin $P_NAME/doc

# Makefile
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating makefile"
cat >> $P_NAME/Makefile <<EOT
SDIR = ./src
ODIR = ./obj
LDIR = ./lib
IDIR = ./inc
BDIR = ./bin
DDIR = ./doc

BNAME = ${P_NAME}

CC = gcc
CFLAGS = -I\$(IDIR)${P_LIB}

DEPS = \$(wildcard \$(IDIR)/*.h)
SOURCES = \$(wildcard \$(SDIR)/*.c)
OBJECTS = \$(patsubst \$(SDIR)/%.c, \$(ODIR)/%.o, \$(SOURCES))

\$(BDIR)/\$(BNAME): \$(OBJECTS)
	\$(CC) -g -o \$@ \$^ \$(CFLAGS)

\$(ODIR)/%.o: \$(SDIR)/%.c \$(DEPS)
	\$(CC) -g -c -o \$@ \$< \$(CFLAGS)

.PHONY: clean doc
.SILENT: run clean

clean:
	rm -f \$(ODIR)/*.o *~ core \$(INCDIR)/*~ \$(BDIR)/*

run:
	chmod +x \$(BDIR)/\$(BNAME) && \$(BDIR)/\$(BNAME)

doc:
	man \$(DDIR)/\$(BNAME)
EOT


# man page
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating man page"
FDATE=`date +"%d %B %Y"`
cat >> $P_NAME/doc/$P_NAME <<EOT
.\" Manpage for ${P_NAME}.
.\" Contact ${USER}@${HOST} to correct errors or typos.
.TH man 1 "${FDATE}" "1.0" "${P_NAME} man page"
.SH NAME
${P_NAME} \- lorem ipsum dolor sit amet
.SH SYNOPSIS
${P_NAME} [OPTIONS...]
.SH DESCRIPTION
${P_NAME} is a template C software generated by the FactorC scaffolding script.
.SH OPTIONS
Description of all options that can change ${P_NAME} behavior.
.SH SEE ALSO
Any references you may want to include.
.SH BUGS
No known bugs.
.SH AUTHOR
Software written by ${USER} <${USER}@${HOST}>
EOT

# README file
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating README file"
cat >> $P_NAME/README.md <<EOT
# README

Demo readme file for project documentation.
EOT


# gitignore file
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating .gitignore"
cat >> $P_NAME/.gitignore <<EOT
build/
obj/
EOT


# main source file
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating placeholder code"
cat >> $P_NAME/src/main.c <<EOT
${P_INC}

int main(int argc, char** argv)
{
    ${P_CODE}

    return 0;
}
EOT

echo -e "${BLUE}[${CYAN}!${BLUE}]${NC} All done :)\n"
struct_summary $P_NAME
echo -e "\n"
