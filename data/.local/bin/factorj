#!/bin/zsh

RED='\033[1;31m'
BLUE='\033[1;34m'
CYAN='\033[1;36m'
NC='\033[0m'

struct_summary()
{
    echo -e "\t${BLUE}./${P_DEMONAME}/${NC}"
    echo -e "\t├── ${BLUE}src/${NC}"
    echo -e "\t│   ├── ${BLUE}assets/${NC}"
    echo -e "\t│   │   └── ${BLUE}assets/${NC}"
    echo -e "\t│   │       ├── ${BLUE}css/${NC}"
    echo -e "\t│   │       │   └── main.css"
    echo -e "\t│   │       └── ${BLUE}js/${NC}"
    echo -e "\t│   │           └── main.js"
    echo -e "\t│   └── index.html"
    echo -e "\t├── .gitignore"
    echo -e "\t├── gulpfile.js"
    echo -e "\t├── package.json"
    echo -e "\t└── README.md"
}

usage()
{
    echo -e "${BLUE}[${CYAN}?${BLUE}]${NC} Usage: $0 <PROJECT>\n"
    echo -e "\tSTRUCTURE\n"
    struct_summary
    echo -e "\n"
    exit 1
}

duplicated()
{
    echo -e "${BLUE}[${RED}x${BLUE}]${NC} Directory already exists.\n"
    exit 1
}

# print header
echo $BLUE
figlet "FactorJ"
echo "Javascript project scaffold generator v0.1"
echo $NC

# get project name
P_NAME=$1
if [ -z "$P_NAME" ]; then
    usage
fi

# header
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Project: $P_NAME"

# creating project directory structure
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Creating directory structure..."
[ -d "$P_NAME" ] && duplicated
mkdir -p $P_NAME/src/assets/css $P_NAME/src/assets/img $P_NAME/src/assets/js

# README file
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Generate README file"
cat >> $P_NAME/README.md <<EOT
# README

Demo readme file for project documentation.
EOT


# gitignore file
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Generating .gitignore"
cat >> $P_NAME/.gitignore <<EOT
node_modules/
package-lock.json
EOT


# package specification file
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Generating package.json"
cat >> $P_NAME/package.json <<EOT
{
  "name": "${P_NAME}",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "${USER} <${USER}@${HOST}>",
  "license": "Zlib",
  "devDependencies": {
    "autoprefixer": "^9.8.6",
    "gulp": "^4.0.2",
    "gulp-clean-css": "^4.3.0",
    "gulp-concat": "^2.6.1",
    "gulp-imagemin": "^7.1.0",
    "gulp-sourcemaps": "^3.0.0",
    "gulp-terser": "^2.0.1",
    "postcss": "^8.2.10"
  }
}
EOT


##
## GULP
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Generating gulpfile.js"
cat >> $P_NAME/gulpfile.js <<EOT
const gulp = require('gulp');
const concat = require('gulp-concat');
const terser = require('gulp-terser');
const cleancss = require('gulp-clean-css');
const imagemin = require('gulp-imagemin');
const sourcemaps = require('gulp-sourcemaps');
const { src, series, parallel, dest, watch } = require('gulp');

// filepaths
const pathJs = 'src/assets/js/**/*.js';
const pathCss = 'src/assets/css/**/*.css';
const pathHtml = 'src/*.html';
const pathImages = 'src/assets/img/**/*';

// copy html files
function html() {
    return src(pathHtml)
        .pipe(gulp.dest('dist'));
}

// optimize images
function images() {
    return src(pathImages)
        .pipe(imagemin())
        .pipe(gulp.dest('dist/assets/img'));
}

// concatenate and minify javascript files
function javascript() {
    return src(pathJs)
        .pipe(sourcemaps.init())
        .pipe(concat('all.js'))
        .pipe(terser())
        .pipe(sourcemaps.write('.'))
        .pipe(dest('dist/assets/js'));
}

// concatenate and minify css files
function css() {
    return src(pathCss)
        .pipe(sourcemaps.init())
        .pipe(concat('all.css'))
        .pipe(cleancss({
            level: 2,
            inline: ['all']
            // format: 'beautify'
        }))
        .pipe(sourcemaps.write('.'))
        .pipe(dest('dist/assets/css'));
}

// watch files for changes
function listen() {
    watch([pathHtml, pathCss, pathImages, pathJs], {interval: 1000}, parallel(html, css, images, javascript));
}

// exporting commands
exports.js = javascript;
exports.css = css;
exports.html = html;
exports.images = images;
exports.default = series(parallel(html, css, images, javascript), listen);
EOT


##
## HTML
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Generating html"
cat >> $P_NAME/src/index.html <<EOT
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="assets/css/all.css">
    <title>${P_NAME}</title>
</head>
<body>
    
    <!-- scripts -->
    <script src="assets/js/all.js"></script>
</body>
</html>
EOT


##
## JAVASCRIPT
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Generating javascript"
cat >> $P_NAME/src/assets/js/main.js <<EOT
console.log('Ready to go...');
EOT


##
## CSS
echo "${BLUE}[${CYAN}+${BLUE}]${NC} Generating css"
cat >> $P_NAME/src/assets/css/main.css <<EOT
html, body {
    margin: 0;
    padding: 0;
}

body {
    width: 100%;
    height: 100%;
}
EOT



# finished!
echo -e "${BLUE}[${CYAN}!${BLUE}]${NC} All done :)\n"
struct_summary
echo -e "\n"
